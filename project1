// Module for basic logic gates
module logic_gates(
    input a,
    input b,
    output and_out,
    output or_out,
    output not_out_a,
    output not_out_b,
    output nand_out,
    output nor_out,
    output xor_out,
    output xnor_out
);

    // Define the logic gates
    assign and_out = a & b;
    assign or_out = a | b;
    assign not_out_a = ~a;
    assign not_out_b = ~b;
    assign nand_out = ~(a & b);
    assign nor_out = ~(a | b);
    assign xor_out = a ^ b;
    assign xnor_out = ~(a ^ b);

endmodule

// Testbench for simulating the logic gates
module testbench;
    // Testbench variables
    reg a;
    reg b;
    wire and_out;
    wire or_out;
    wire not_out_a;
    wire not_out_b;
    wire nand_out;
    wire nor_out;
    wire xor_out;
    wire xnor_out;

    // Instantiate the logic gates module
    logic_gates uut (
        .a(a),
        .b(b),
        .and_out(and_out),
        .or_out(or_out),
        .not_out_a(not_out_a),
        .not_out_b(not_out_b),
        .nand_out(nand_out),
        .nor_out(nor_out),
        .xor_out(xor_out),
        .xnor_out(xnor_out)
    );

    // Test stimulus
    initial begin
        // Initialize inputs
        a = 0; b = 0;
        #10;
        a = 0; b = 1;
        #10;
        a = 1; b = 0;
        #10;
        a = 1; b = 1;
        #10;

        // Finish simulation
        $finish;
    end

    // Monitor the output
    initial begin
        $monitor("a=%b b=%b | AND=%b OR=%b NOT_a=%b NOT_b=%b NAND=%b NOR=%b XOR=%b XNOR=%b", 
                 a, b, and_out, or_out, not_out_a, not_out_b, nand_out, nor_out, xor_out, xnor_out);
    end
endmodule
